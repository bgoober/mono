model Entry {
  id              String  @id @default(cuid())
  // Editable fields (directly)
  term            String  @unique
  definition      String
  links           Json?
  longDefinition  String?
  acronym         String?
  updateRequested Boolean @default(false)
  hidden          Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userEntries      UserEntry[]
  edits            EntryRevision[] @relation("edits")
  currentVersion   EntryRevision?  @relation("currentVersion", fields: [currentVersionId], references: [id], onDelete: Cascade)
  currentVersionId String?         @unique
  reviews          EntryReview[]
  tags             EntryTag[]
  relatedTo        EntryRelation[] @relation("relatedTo")
  relatedFrom      EntryRelation[] @relation("relatedFrom")
}

model EntryRevision {
  id      String @id @default(cuid())
  entryId String
  userId  String

  term           String
  definition     String
  longDefinition String?
  links          Json?
  tags           String[]
  acronym        String?
  hidden         Boolean  @default(false)

  previousTerm           String
  previousDefinition     String
  previousLongDefinition String?
  previousLinks          Json?
  previousTags           String[]
  previousAcronym        String?
  previousHidden         Boolean  @default(false)

  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  parentId       String?
  parent         EntryRevision?  @relation("parent", fields: [parentId], references: [id])
  children       EntryRevision[] @relation("parent")
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  entry          Entry           @relation("edits", fields: [entryId], references: [id], onDelete: Cascade)
  currentVersion Entry?          @relation("currentVersion")
  entryEditId    String?
  reviews        EntryReview[]

  @@map("EntryEdit")
}

model UserEntry {
  id                 String   @id @default(cuid())
  userId             String
  entryId            String
  isCreator          Boolean  @default(false)
  canEdit            Boolean  @default(false)
  hasLiked           Boolean  @default(false)
  hasEdited          Boolean  @default(false)
  hasReviewed        Boolean  @default(false)
  hasRequestedUpdate Boolean  @default(false)
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  entry              Entry    @relation(fields: [entryId], references: [id], onDelete: Cascade)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@unique([userId, entryId])
}

model EntryReview {
  id                String         @id @default(cuid())
  userId            String
  entryId           String
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  entry             Entry          @relation(fields: [entryId], references: [id], onDelete: Cascade)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  reviewedVersionId String?
  reviewedVersion   EntryRevision? @relation(fields: [reviewedVersionId], references: [id], onDelete: Cascade)

  @@unique([userId, entryId])
}

model EntryRelation {
  entryAId String
  entryA   Entry  @relation("relatedTo", fields: [entryAId], references: [id], onDelete: Cascade)
  entryBId String
  entryB   Entry  @relation("relatedFrom", fields: [entryBId], references: [id], onDelete: Cascade)

  @@id([entryAId, entryBId])
  @@map("entry_relations")
}

model EntryTag {
  entryId   String
  tagId     String
  entry     Entry    @relation(fields: [entryId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([entryId, tagId])
}
